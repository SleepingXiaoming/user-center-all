import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { useStyle as useAntdStyle } from '@ant-design/pro-utils';
import { ConfigProvider } from 'antd';
import { useContext } from 'react';
var ConfigContext = ConfigProvider.ConfigContext;

var genActionsStyle = function genActionsStyle(token) {
  var _span, _$concat;

  var componentCls = token.componentCls,
      antCls = token.antCls;
  return _defineProperty({}, "".concat(componentCls, "-actions"), (_$concat = {
    marginBlock: 0,
    marginInline: 0,
    paddingBlock: 0,
    paddingInline: 0,
    listStyle: 'none',
    background: token.colorBgContainer,
    borderBlockStart: "".concat(token.lineWidth, "px ").concat(token.lineType, " ").concat(token.colorSplit)
  }, _defineProperty(_$concat, "".concat(antCls, "-space"), {
    gap: '0 !important',
    width: '100%'
  }), _defineProperty(_$concat, "& > li,\n        ".concat(antCls, "-space-item"), {
    flex: 1,
    float: 'left',
    marginBlock: token.marginSM,
    marginInline: 0,
    color: token.colorTextSecondary,
    textAlign: 'center',
    '> a': {
      color: token.colorTextSecondary,
      transition: 'color 0.3s',
      '&:hover': {
        color: token.colorPrimaryHover
      }
    },
    '> span': (_span = {
      position: 'relative',
      display: 'block',
      minWidth: 32,
      fontSize: token.fontSize,
      lineHeight: token.lineHeight,
      cursor: 'pointer',
      '&:hover': {
        color: token.colorPrimaryHover,
        transition: 'color 0.3s'
      }
    }, _defineProperty(_span, "a:not(".concat(antCls, "-btn),\n            > .anticon"), {
      display: 'inline-block',
      width: '100%',
      color: token.colorTextSecondary,
      lineHeight: '22px',
      transition: 'color 0.3s',
      '&:hover': {
        color: token.colorPrimaryHover
      }
    }), _defineProperty(_span, '> .anticon', {
      fontSize: token.cardActionIconSize,
      lineHeight: '22px'
    }), _span),
    '&:not(:last-child)': {
      borderInlineEnd: "".concat(token.lineWidth, "px ").concat(token.lineType, " ").concat(token.colorSplit)
    }
  }), _$concat));
};

export default function useStyle(prefixCls) {
  var _useContext = useContext(ConfigContext),
      getPrefixCls = _useContext.getPrefixCls;

  var antCls = ".".concat(getPrefixCls());
  return useAntdStyle('ProCardActions', function (token) {
    var proCardActionsToken = _objectSpread(_objectSpread({}, token), {}, {
      componentCls: ".".concat(prefixCls),
      antCls: antCls,
      cardActionIconSize: 16
    });

    return [genActionsStyle(proCardActionsToken)];
  });
}