import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { useStyle as useAntdStyle } from '@ant-design/pro-utils';

var proCheckCardActive = function proCheckCardActive(token) {
  return {
    backgroundColor: token.colorPrimaryBgHover,
    borderColor: token.colorPrimary
  };
};

var proCheckCardDisabled = function proCheckCardDisabled(token) {
  return _defineProperty({
    backgroundColor: token.colorBgContainerDisabled,
    borderColor: token.colorBorder,
    cursor: 'not-allowed'
  }, token.componentCls, {
    '&-description': {
      color: token.colorTextDisabled
    },
    '&-title': {
      color: token.colorTextDisabled
    },
    '&-avatar': {
      opacity: '0.25'
    }
  });
};

var genProStyle = function genProStyle(token) {
  return _defineProperty({}, token.componentCls, _defineProperty({
    position: 'relative',
    display: 'inline-block',
    width: '320px',
    marginInlineEnd: '16px',
    marginBlockEnd: '16px',
    color: token.colorText,
    fontSize: token.fontSizeBase,
    lineHeight: token.lineHeight,
    verticalAlign: 'top',
    backgroundColor: token.colorBgBase,
    borderRadius: token.radiusBase,
    cursor: 'pointer',
    transition: "all 0.3s",
    '&:last-child': {
      marginInlineEnd: 0
    },
    '& + &': {
      marginInlineStart: '0 !important'
    },
    '&-bordered': {
      border: "".concat(token.lineWidth, "px solid ").concat(token.colorBorder)
    },
    '&-group': {
      display: 'inline-block'
    },
    '&-loading': {
      overflow: 'hidden',
      userSelect: 'none',
      '&-content': {
        paddingInline: token.padding,
        paddingBlock: token.paddingSM,
        p: {
          marginBlock: 0,
          marginInline: 0
        },
        '&-block': {
          height: '14px',
          marginBlock: '4px',
          background: "linear-gradient(90deg, rgba(54, 61, 64, 0.2), rgba(54, 61, 64, 0.4), rgba(54, 61, 64, 0.2))"
        },
        '@keyframes card-loading': {
          '0%': {
            backgroundPosition: '0 50%'
          },
          '50%': {
            backgroundPosition: '100% 50%'
          },
          '100%': {
            backgroundPosition: '0 50%'
          }
        }
      }
    },
    '&:focus': proCheckCardActive(token),
    '&-checked': _objectSpread(_objectSpread({}, proCheckCardActive(token)), {}, {
      '&:after': {
        position: 'absolute',
        insetBlockStart: 2,
        insetInlineEnd: 2,
        width: 0,
        height: 0,
        border: "6px solid ".concat(token.colorPrimary),
        borderBottom: '6px solid transparent',
        borderLeft: '6px solid transparent',
        borderTopRightRadius: '2px',
        content: "''"
      }
    }),
    '&-disabled': proCheckCardDisabled(token),
    '&[disabled]': proCheckCardDisabled(token),
    '&-lg': {
      width: 440
    },
    '&-sm': {
      width: 212
    },
    '&-cover': {
      paddingInline: token.paddingXXS,
      paddingBlock: token.paddingXXS,
      img: {
        width: '100%',
        height: '100%',
        overflow: 'hidden',
        borderRadius: token.radiusBase
      }
    },
    '&-content': {
      display: 'flex',
      paddingInline: token.paddingSM,
      paddingBlock: token.padding
    },
    '&-avatar-header': {
      display: 'flex',
      alignItems: 'center'
    },
    '&-avatar': {
      paddingInlineEnd: 8
    },
    '&-detail': {
      overflow: 'hidden',
      '> div:not(:last-child)': {
        marginBlockEnd: 4
      }
    },
    '&-header': {
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'space-between'
    },
    '&-title': {
      overflow: 'hidden',
      color: token.colorTextHeading,
      fontWeight: '500',
      fontSize: token.fontSize,
      whiteSpace: 'nowrap',
      textOverflow: 'ellipsis'
    },
    '&-description': {
      color: token.colorTextSecondary
    }
  }, "&:not(".concat(token.componentCls, "-disabled)"), {
    '&:hover': {
      borderColor: token.colorPrimary
    }
  }));
};

export function useStyle(prefixCls) {
  return useAntdStyle('CheckCard', function (token) {
    var proListToken = _objectSpread(_objectSpread({}, token), {}, {
      componentCls: ".".concat(prefixCls)
    });

    return [genProStyle(proListToken)];
  });
}