import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import { jsx as _jsx } from "react/jsx-runtime";
import { setAlpha, useToken } from '@ant-design/pro-utils';
import React from 'react';
export var getLayoutDesignToken = function getLayoutDesignToken(designTokens, antdToken) {
  var _finalDesignTokens$si;

  var finalDesignTokens = _objectSpread({}, designTokens);

  return _objectSpread(_objectSpread({
    bgLayout: 'linear-gradient(#fff, #f7f8fa 28%)',
    colorTextAppListIcon: '#666',
    appListIconHoverBgColor: finalDesignTokens === null || finalDesignTokens === void 0 ? void 0 : (_finalDesignTokens$si = finalDesignTokens.sider) === null || _finalDesignTokens$si === void 0 ? void 0 : _finalDesignTokens$si.colorBgMenuItemSelected,
    colorBgAppListIconHover: 'rgba(0, 0, 0, 0.04)',
    colorTextAppListIconHover: antdToken.colorTextBase
  }, finalDesignTokens), {}, {
    header: _objectSpread({
      colorBgHeader: 'rgba(240, 242, 245, 0.4)',
      colorHeaderTitle: antdToken.colorText,
      colorBgMenuItemHover: setAlpha(antdToken.colorTextBase, 0.03),
      colorBgMenuItemSelected: 'transparent',
      colorTextMenuSelected: setAlpha(antdToken.colorTextBase, 0.95),
      colorBgRightActionsItemHover: setAlpha(antdToken.colorTextBase, 0.03),
      colorTextRightActionsItem: antdToken.colorTextTertiary,
      heightLayoutHeader: 56,
      colorTextMenu: setAlpha(antdToken.colorTextBase, 0.65),
      colorTextMenuSecondary: antdToken.colorTextTertiary,
      colorTextMenuTitle: antdToken.colorText,
      colorTextMenuActive: antdToken.colorText
    }, finalDesignTokens.header),
    sider: _objectSpread({
      paddingInlineLayoutMenu: 8,
      paddingBlockLayoutMenu: 8,
      colorBgCollapsedButton: '#fff',
      colorTextCollapsedButtonHover: antdToken.colorTextSecondary,
      colorTextCollapsedButton: setAlpha(antdToken.colorTextBase, 0.25),
      colorMenuBackground: 'transparent',
      colorBgMenuItemCollapsedHover: 'rgba(90, 75, 75, 0.03)',
      colorBgMenuItemCollapsedSelected: setAlpha(antdToken.colorTextBase, 0.04),
      colorMenuItemDivider: setAlpha(antdToken.colorTextBase, 0.06),
      colorBgMenuItemHover: setAlpha(antdToken.colorTextBase, 0.03),
      colorBgMenuItemSelected: setAlpha(antdToken.colorTextBase, 0.04),
      colorTextMenuSelected: setAlpha(antdToken.colorTextBase, 0.95),
      colorTextMenuActive: antdToken.colorText,
      colorTextMenu: setAlpha(antdToken.colorTextBase, 0.65),
      colorTextMenuSecondary: antdToken.colorTextTertiary,
      colorTextMenuTitle: antdToken.colorText,
      colorTextSubMenuSelected: setAlpha(antdToken.colorTextBase, 0.95)
    }, finalDesignTokens.sider),
    pageContainer: _objectSpread({
      colorBgPageContainer: 'transparent',
      marginBlockPageContainerContent: 24,
      marginInlinePageContainerContent: 40,
      colorBgPageContainerFixed: '#fff'
    }, finalDesignTokens.pageContainer)
  });
};
var defaultToken = getLayoutDesignToken({}, {});
export var ProLayoutContext = /*#__PURE__*/React.createContext(defaultToken);
export var ProLayoutProvider = function ProLayoutProvider(props) {
  var _useToken = useToken(),
      token = _useToken.token,
      hashId = _useToken.hashId;

  return _jsx(ProLayoutContext.Provider, {
    value: _objectSpread(_objectSpread({}, getLayoutDesignToken((props === null || props === void 0 ? void 0 : props.token) || {}, token)), {}, {
      hashId: hashId
    }),
    children: props.children
  });
};