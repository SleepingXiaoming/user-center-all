import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { useStyle as useAntdStyle } from '@ant-design/pro-utils';
import { useContext } from 'react';
import { ProLayoutContext } from '../../context/ProLayoutContext';

var genGlobalHeaderStyle = function genGlobalHeaderStyle(token) {
  var _token$componentCls;

  return _defineProperty({}, token.componentCls, (_token$componentCls = {
    position: 'relative',
    background: 'transparent',
    display: 'flex',
    alignItems: 'center',
    marginBlock: 0,
    marginInline: 16,
    height: token.heightLayoutHeader,
    boxSizing: 'border-box',
    '> a': {
      height: '100%'
    }
  }, _defineProperty(_token$componentCls, "".concat(token.proComponentsCls, "-layout-apps-icon"), {
    marginInlineEnd: 16
  }), _defineProperty(_token$componentCls, '&-collapsed-button', {
    minHeight: '22px',
    fontSize: '22px',
    marginInlineStart: '16px'
  }), _defineProperty(_token$componentCls, '&-logo', {
    position: 'relative',
    minWidth: '154px',
    marginInlineEnd: '16px',
    a: {
      display: 'flex',
      alignItems: 'center',
      height: '100%',
      minHeight: '22px',
      fontSize: '20px'
    },
    img: {
      height: '28px'
    },
    h1: {
      height: '32px',
      marginBlock: 0,
      marginInline: 0,
      marginInlineStart: 8,
      fontWeight: '600',
      color: token.colorTextHeading,
      fontSize: '18px',
      lineHeight: '32px'
    },
    '&-mix': {
      display: 'flex',
      alignItems: 'center'
    }
  }), _defineProperty(_token$componentCls, '&-logo-mobile', {
    minWidth: '24px',
    marginInlineEnd: 0
  }), _token$componentCls));
};

export function useStyle(prefixCls) {
  var _useContext = useContext(ProLayoutContext),
      header = _useContext.header;

  return useAntdStyle('pro-layout-global-header', function (token) {
    var GlobalHeaderToken = _objectSpread(_objectSpread({}, token), {}, {
      componentCls: ".".concat(prefixCls),
      heightLayoutHeader: header.heightLayoutHeader
    });

    return [genGlobalHeaderStyle(GlobalHeaderToken)];
  });
}