import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { ConfigProvider } from 'antd';
import classNames from 'classnames';
import { useContext, useMemo, useRef } from 'react';
import { ProLayoutContext } from '../../context/ProLayoutContext';
import { AppsLogoComponents } from '../AppsLogoComponents';
import { RightContent } from '../GlobalHeader/RightContent';
import { BaseMenu } from '../SiderMenu/BaseMenu';
import { renderLogoAndTitle } from '../SiderMenu/SiderMenu';
import { useStyle } from './style';

var TopNavHeader = function TopNavHeader(props) {
  var ref = useRef(null);
  var onMenuHeaderClick = props.onMenuHeaderClick,
      contentWidth = props.contentWidth,
      rightContentRender = props.rightContentRender,
      propsClassName = props.className,
      style = props.style,
      headerContentRender = props.headerContentRender,
      layout = props.layout,
      actionsRender = props.actionsRender;

  var _useContext = useContext(ConfigProvider.ConfigContext),
      getPrefixCls = _useContext.getPrefixCls;

  var _useContext2 = useContext(ProLayoutContext),
      header = _useContext2.header;

  var prefixCls = "".concat(props.prefixCls || getPrefixCls('pro'), "-top-nav-header");

  var _useStyle = useStyle(prefixCls),
      wrapSSR = _useStyle.wrapSSR,
      hashId = _useStyle.hashId;

  var headerDom = renderLogoAndTitle(_objectSpread(_objectSpread({}, props), {}, {
    collapsed: false
  }), layout === 'mix' ? 'headerTitleRender' : undefined);
  var contentDom = useMemo(function () {
    var _process$env$NODE_ENV, _props$menuProps;

    var defaultDom = _jsx(ConfigProvider // @ts-ignore
    , {
      // @ts-ignore
      theme: {
        hashed: ((_process$env$NODE_ENV = process.env.NODE_ENV) === null || _process$env$NODE_ENV === void 0 ? void 0 : _process$env$NODE_ENV.toLowerCase()) !== 'test',
        override: {
          Menu: {
            colorItemBg: 'transparent',
            colorSubItemBg: 'transparent',
            radiusItem: 4,
            colorItemBgSelected: header.colorBgMenuItemSelected || 'rgba(0, 0, 0, 0.04)',
            colorItemBgActive: header.colorBgMenuItemHover || 'rgba(0, 0, 0, 0.04)',
            colorItemBgSelectedHorizontal: header.colorBgMenuItemSelected || 'rgba(0, 0, 0, 0.04)',
            colorActiveBarWidth: 0,
            colorActiveBarHeight: 0,
            colorActiveBarBorderSize: 0,
            colorItemText: header.colorTextMenu || 'rgba(0, 0, 0, 0.65)',
            colorItemTextHover: header.colorTextMenuActive || 'rgba(0, 0, 0, 0.85)',
            colorItemTextSelected: header.colorTextMenuSelected || 'rgba(0, 0, 0, 1)'
          }
        }
      },
      children: _jsx(BaseMenu, _objectSpread(_objectSpread(_objectSpread({
        theme: "light"
      }, props), {}, {
        className: "".concat(prefixCls, "-base-menu ").concat(hashId)
      }, props.menuProps), {}, {
        style: _objectSpread({
          width: '100%'
        }, (_props$menuProps = props.menuProps) === null || _props$menuProps === void 0 ? void 0 : _props$menuProps.style),
        collapsed: false,
        menuRenderType: "header",
        mode: "horizontal"
      }))
    });

    if (headerContentRender) {
      return headerContentRender(props, defaultDom);
    }

    return defaultDom;
  }, [hashId, header.colorBgMenuItemHover, header.colorBgMenuItemSelected, header.colorTextMenu, header.colorTextMenuActive, header.colorTextMenuSelected, headerContentRender, prefixCls, props]);
  return wrapSSR(_jsx("div", {
    className: classNames(prefixCls, hashId, propsClassName, _defineProperty({}, "".concat(prefixCls, "-light"), true)),
    style: style,
    children: _jsxs("div", {
      ref: ref,
      className: classNames("".concat(prefixCls, "-main"), hashId, _defineProperty({}, "".concat(prefixCls, "-wide"), contentWidth === 'Fixed')),
      children: [headerDom && _jsxs("div", {
        className: classNames("".concat(prefixCls, "-main-left ").concat(hashId)),
        onClick: onMenuHeaderClick,
        children: [_jsx(AppsLogoComponents, _objectSpread({}, props)), _jsx("div", {
          className: "".concat(prefixCls, "-logo ").concat(hashId),
          id: "logo",
          children: headerDom
        }, "logo")]
      }), _jsx("div", {
        style: {
          flex: 1
        },
        className: "".concat(prefixCls, "-menu ").concat(hashId),
        children: contentDom
      }), (rightContentRender || actionsRender || props.avatarProps) && _jsx(RightContent, _objectSpread(_objectSpread({
        rightContentRender: rightContentRender
      }, props), {}, {
        prefixCls: prefixCls
      }))]
    })
  }));
};

export { TopNavHeader };