import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { ConfigProvider, Layout } from 'antd';
import classNames from 'classnames';
import { useCallback, useContext } from 'react';
import { ProLayoutContext } from '../context/ProLayoutContext';
import { useStyle } from '../style/header';
import { clearMenuItem } from '../utils/utils';
import { GlobalHeader } from './GlobalHeader';
import { TopNavHeader } from './TopNavHeader';
var Header = Layout.Header;

var DefaultHeader = function DefaultHeader(props) {
  var _classNames, _process$env$NODE_ENV;

  var isMobile = props.isMobile,
      fixedHeader = props.fixedHeader,
      propsClassName = props.className,
      style = props.style,
      collapsed = props.collapsed,
      prefixCls = props.prefixCls,
      onCollapse = props.onCollapse,
      navTheme = props.navTheme,
      layout = props.layout,
      headerRender = props.headerRender,
      headerContentRender = props.headerContentRender;

  var _useContext = useContext(ProLayoutContext),
      header = _useContext.header;

  var renderContent = useCallback(function () {
    var isTop = layout === 'top';
    var clearMenuData = clearMenuItem(props.menuData || []);

    var defaultDom = _jsx(GlobalHeader, _objectSpread(_objectSpread({
      onCollapse: onCollapse
    }, props), {}, {
      menuData: clearMenuData,
      children: headerContentRender && headerContentRender(props, null)
    }));

    if (isTop && !isMobile) {
      defaultDom = _jsx(TopNavHeader, _objectSpread(_objectSpread({
        theme: navTheme,
        mode: "horizontal",
        onCollapse: onCollapse
      }, props), {}, {
        menuData: clearMenuData
      }));
    }

    if (headerRender && typeof headerRender === 'function') {
      return headerRender(props, defaultDom);
    }

    return defaultDom;
  }, [headerContentRender, headerRender, isMobile, layout, navTheme, onCollapse, props]);
  var needFixedHeader = fixedHeader || layout === 'mix';
  var isTop = layout === 'top';
  var baseClassName = "".concat(prefixCls, "-layout-header");

  var _useStyle = useStyle(baseClassName, {
    proLayoutCls: prefixCls || 'ant-pro-layout'
  }),
      wrapSSR = _useStyle.wrapSSR,
      hashId = _useStyle.hashId;

  var className = classNames(propsClassName, hashId, baseClassName, (_classNames = {}, _defineProperty(_classNames, "".concat(baseClassName, "-fixed-header"), needFixedHeader), _defineProperty(_classNames, "".concat(baseClassName, "-mix"), layout === 'mix'), _defineProperty(_classNames, "".concat(baseClassName, "-fixed-header-action"), !collapsed), _defineProperty(_classNames, "".concat(baseClassName, "-top-menu"), isTop), _defineProperty(_classNames, "".concat(baseClassName, "-header"), true), _classNames));
  if (layout === 'side' && !isMobile) return null;
  return wrapSSR(_jsx(_Fragment, {
    children: _jsxs(ConfigProvider // @ts-ignore
    , {
      // @ts-ignore
      theme: {
        hashed: ((_process$env$NODE_ENV = process.env.NODE_ENV) === null || _process$env$NODE_ENV === void 0 ? void 0 : _process$env$NODE_ENV.toLowerCase()) !== 'test',
        override: {
          Layout: {
            colorBgHeader: 'transparent',
            colorBgBody: 'transparent'
          }
        }
      },
      children: [needFixedHeader && _jsx(Header, {
        style: _objectSpread({
          height: header.heightLayoutHeader,
          lineHeight: "".concat(header.heightLayoutHeader, "px"),
          backgroundColor: 'transparent',
          zIndex: 19
        }, style)
      }), _jsx(Header, {
        className: className,
        style: style,
        children: renderContent()
      })]
    })
  }));
};

export { DefaultHeader };