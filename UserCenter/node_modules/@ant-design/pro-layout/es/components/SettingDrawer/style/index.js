import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { useStyle as useAntdStyle } from '@ant-design/pro-utils';

var genSettingDrawerStyle = function genSettingDrawerStyle(token) {
  var _ref;

  return _ref = {}, _defineProperty(_ref, "".concat(token.componentCls, "-handle"), {
    position: 'fixed',
    insetBlockStart: '240px',
    insetInlineEnd: '0px',
    zIndex: 0,
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    width: '48px',
    height: '48px',
    fontSize: '16px',
    textAlign: 'center',
    backgroundColor: token.colorPrimary,
    borderEndStartRadius: token.radiusLG,
    borderStartStartRadius: token.radiusLG,
    '-webkit-backdropilter': 'saturate(180%) blur(20px)',
    backdropFilter: 'saturate(180%) blur(20px)',
    cursor: 'pointer',
    pointerEvents: 'auto'
  }), _defineProperty(_ref, token.componentCls, {
    '&-content': {
      position: 'relative',
      minHeight: '100%',
      color: token.colorText
    },
    '&-body-title': {
      marginBlockEnd: '12px',
      fontSize: '14px',
      lineHeight: '22px',
      color: token.colorTextHeading
    },
    '&-block-checkbox': {
      display: 'flex',
      minHeight: 42,
      '&-item': {
        position: 'relative',
        width: '44px',
        height: '36px',
        marginInlineEnd: '16px',
        overflow: 'hidden',
        borderRadius: '4px',
        boxShadow: '0 1px 2.5px 0 rgba(0, 0, 0, 0.18)',
        cursor: 'pointer',
        fontSize: 56,
        lineHeight: '56px',
        '&::before': {
          position: 'absolute',
          insetBlockStart: 0,
          insetInlineStart: 0,
          width: '33%',
          height: '100%',
          content: "''"
        },
        '&::after': {
          position: 'absolute',
          insetBlockStart: 0,
          insetInlineStart: 0,
          width: '100%',
          height: '25%',
          content: "''"
        },
        '&-realDark': {
          backgroundColor: 'rgba(0, 21, 41, 0.85)',
          '&::before': {
            backgroundColor: token.colorTextSecondary
          },
          '&::after': {
            backgroundColor: token.colorText
          }
        },
        '&-light': {
          backgroundColor: token.colorBgContainer,
          '&::before': {
            backgroundColor: token.colorBgContainer
          },
          '&::after': {
            backgroundColor: token.colorBgContainer
          }
        },
        '&-dark,&-side': {
          backgroundColor: '#f7f8fa',
          '&::before': {
            zIndex: '1',
            backgroundColor: '#001529'
          },
          '&::after': {
            backgroundColor: token.colorBgContainer
          }
        },
        '&-top': {
          backgroundColor: '#f7f8fa',
          '&::before': {
            backgroundColor: 'transparent'
          },
          '&::after': {
            backgroundColor: '#001529'
          }
        },
        '&-mix': {
          backgroundColor: '#f7f8fa',
          '&::before': {
            backgroundColor: token.colorBgContainer
          },
          '&::after': {
            backgroundColor: '#001529'
          }
        }
      },
      '& &-selectIcon': {
        position: 'absolute',
        insetInlineEnd: '6px',
        bottom: '4px',
        color: token.colorPrimary,
        fontWeight: 'bold',
        fontSize: '14px',
        pointerEvents: 'none',
        '.action': {
          color: token.colorPrimary
        }
      }
    },
    '&-theme-color': {
      marginBlockStart: '16px',
      overflow: 'hidden',
      '& &-block': {
        float: 'left',
        width: '20px',
        height: '20px',
        marginBlockStart: 8,
        marginInlineEnd: 8,
        color: '#fff',
        fontWeight: 'bold',
        textAlign: 'center',
        borderRadius: '2px',
        cursor: 'pointer'
      }
    }
  }), _ref;
};

export function useStyle(prefixCls) {
  return useAntdStyle('pro-layout-setting-drawer', function (token) {
    var settingDrawerToken = _objectSpread(_objectSpread({}, token), {}, {
      componentCls: ".".concat(prefixCls)
    });

    return [genSettingDrawerStyle(settingDrawerToken)];
  });
}