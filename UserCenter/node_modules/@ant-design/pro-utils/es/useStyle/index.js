import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import { useStyleRegister } from '@ant-design/cssinjs';
import { TinyColor } from '@ctrl/tinycolor'; // @ts-ignore

import { ConfigProvider, theme as antdTheme } from 'antd';
import { useContext } from 'react';
import * as batToken from './token';
/**
 * 把一个颜色设置一下透明度
 * @example (#fff, 0.5) => rgba(255, 255, 255, 0.5)
 * @param baseColor {string}
 * @param alpha {0-1}
 * @returns rgba {string}
 */

export var setAlpha = function setAlpha(baseColor, alpha) {
  return new TinyColor(baseColor).setAlpha(alpha).toRgbString();
};
/**
 * 把一个颜色修改一些明度
 * @example (#000, 50) => #808080
 * @param baseColor {string}
 * @param brightness {0-100}
 * @returns hexColor {string}
 */

export var lighten = function lighten(baseColor, brightness) {
  var instance = new TinyColor(baseColor);
  return instance.lighten(brightness).toHexString();
};
/**
 * 如果 antd 里面没有，就用我 mock 的，这样 antd@4 和 antd@5 可以兼容
 */

var _batToken$antdTheme = _objectSpread(_objectSpread({}, batToken), antdTheme),
    useToken = _batToken$antdTheme.useToken;

export { useToken };
export var resetComponent = function resetComponent(token) {
  return {
    boxSizing: 'border-box',
    margin: 0,
    padding: 0,
    color: token.colorText,
    fontSize: token.fontSize,
    lineHeight: token.lineHeight,
    listStyle: 'none'
  };
};
export var operationUnit = function operationUnit(token) {
  return {
    // FIXME: This use link but is a operation unit. Seems should be a colorPrimary.
    // And Typography use this to generate link style which should not do this.
    color: token.colorLink,
    outline: 'none',
    cursor: 'pointer',
    transition: "color ".concat(token.motionDurationSlow),
    '&:focus, &:hover': {
      color: token.colorLinkHover
    },
    '&:active': {
      color: token.colorLinkActive
    }
  };
};
/**
 * 封装了一下 antd 的 useStyle，支持了一下antd@4
 * @param componentName {string} 组件的名字
 * @param styleFn {GenerateStyle} 生成样式的函数
 * @returns {UseStyleResult}
 */

export function useStyle(componentName, styleFn) {
  var _useToken = useToken(),
      token = _useToken.token,
      hashId = _useToken.hashId,
      theme = _useToken.theme;

  var _useContext = useContext(ConfigProvider.ConfigContext),
      getPrefixCls = _useContext.getPrefixCls;
  /**
   * pro 的 类
   * @type {string}
   * @example .ant-pro
   */


  var proComponentsCls = ".".concat(getPrefixCls(), "-pro");
  return {
    wrapSSR: useStyleRegister({
      theme: theme,
      token: token,
      hashId: hashId,
      path: [componentName]
    }, function () {
      return styleFn(_objectSpread(_objectSpread({}, token), {}, {
        antCls: '.' + getPrefixCls(),
        proComponentsCls: proComponentsCls
      }));
    }),
    hashId: hashId
  };
}