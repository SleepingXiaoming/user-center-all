import _regeneratorRuntime from "@babel/runtime/helpers/esm/regeneratorRuntime";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import { useCallback, useEffect, useRef } from 'react';
import { act } from 'react-dom/test-utils';
import { useRefFunction } from '../useRefFunction';
export function useDebounceFn(fn, wait) {
  var callback = useRefFunction(fn);
  var timer = useRef();
  var cancel = useCallback(function () {
    if (timer.current) {
      clearTimeout(timer.current);
      timer.current = null;
    }
  }, []);
  var run = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
    var _len,
        args,
        _key,
        _args3 = arguments;

    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            for (_len = _args3.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = _args3[_key];
            }

            if (!(wait === 0 || wait === undefined)) {
              _context3.next = 3;
              break;
            }

            return _context3.abrupt("return", callback.apply(void 0, args));

          case 3:
            cancel();
            return _context3.abrupt("return", new Promise(function (resolve) {
              timer.current = setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
                return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        if (!(process.env.NODE_ENV === 'TEST')) {
                          _context2.next = 4;
                          break;
                        }

                        _context2.next = 3;
                        return act( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
                          return _regeneratorRuntime().wrap(function _callee$(_context) {
                            while (1) {
                              switch (_context.prev = _context.next) {
                                case 0:
                                  _context.t0 = resolve;
                                  _context.next = 3;
                                  return callback.apply(void 0, args);

                                case 3:
                                  _context.t1 = _context.sent;
                                  (0, _context.t0)(_context.t1);

                                case 5:
                                case "end":
                                  return _context.stop();
                              }
                            }
                          }, _callee);
                        })));

                      case 3:
                        return _context2.abrupt("return");

                      case 4:
                        _context2.t0 = resolve;
                        _context2.next = 7;
                        return callback.apply(void 0, args);

                      case 7:
                        _context2.t1 = _context2.sent;
                        (0, _context2.t0)(_context2.t1);

                      case 9:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2);
              })), wait);
            }));

          case 5:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  })), [callback, cancel, wait]);
  useEffect(function () {
    return cancel;
  }, [cancel]);
  return {
    run: run,
    cancel: cancel
  };
}